# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  createdAt: DateTime
  testResults(where: TestResultWhereInput! = {}, orderBy: [TestResultOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TestResultWhereUniqueInput): [TestResult!]
  testResultsCount(where: TestResultWhereInput! = {}): Int
  questionResults(where: QuestionResultWhereInput! = {}, orderBy: [QuestionResultOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: QuestionResultWhereUniqueInput): [QuestionResult!]
  questionResultsCount(where: QuestionResultWhereInput! = {}): Int
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  createdAt: DateTimeNullableFilter
  testResults: TestResultManyRelationFilter
  questionResults: QuestionResultManyRelationFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input TestResultManyRelationFilter {
  every: TestResultWhereInput
  some: TestResultWhereInput
  none: TestResultWhereInput
}

input QuestionResultManyRelationFilter {
  every: QuestionResultWhereInput
  some: QuestionResultWhereInput
  none: QuestionResultWhereInput
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  createdAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  createdAt: DateTime
  testResults: TestResultRelateToManyForUpdateInput
  questionResults: QuestionResultRelateToManyForUpdateInput
}

input TestResultRelateToManyForUpdateInput {
  disconnect: [TestResultWhereUniqueInput!]
  set: [TestResultWhereUniqueInput!]
  create: [TestResultCreateInput!]
  connect: [TestResultWhereUniqueInput!]
}

input QuestionResultRelateToManyForUpdateInput {
  disconnect: [QuestionResultWhereUniqueInput!]
  set: [QuestionResultWhereUniqueInput!]
  create: [QuestionResultCreateInput!]
  connect: [QuestionResultWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  createdAt: DateTime
  testResults: TestResultRelateToManyForCreateInput
  questionResults: QuestionResultRelateToManyForCreateInput
}

input TestResultRelateToManyForCreateInput {
  create: [TestResultCreateInput!]
  connect: [TestResultWhereUniqueInput!]
}

input QuestionResultRelateToManyForCreateInput {
  create: [QuestionResultCreateInput!]
  connect: [QuestionResultWhereUniqueInput!]
}

type Course {
  id: ID!
  name: String
  questions(where: QuestionWhereInput! = {}, orderBy: [QuestionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: QuestionWhereUniqueInput): [Question!]
  questionsCount(where: QuestionWhereInput! = {}): Int
  testResults(where: TestResultWhereInput! = {}, orderBy: [TestResultOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TestResultWhereUniqueInput): [TestResult!]
  testResultsCount(where: TestResultWhereInput! = {}): Int
}

input CourseWhereUniqueInput {
  id: ID
}

input CourseWhereInput {
  AND: [CourseWhereInput!]
  OR: [CourseWhereInput!]
  NOT: [CourseWhereInput!]
  id: IDFilter
  name: StringFilter
  questions: QuestionManyRelationFilter
  testResults: TestResultManyRelationFilter
}

input QuestionManyRelationFilter {
  every: QuestionWhereInput
  some: QuestionWhereInput
  none: QuestionWhereInput
}

input CourseOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input CourseUpdateInput {
  name: String
  questions: QuestionRelateToManyForUpdateInput
  testResults: TestResultRelateToManyForUpdateInput
}

input QuestionRelateToManyForUpdateInput {
  disconnect: [QuestionWhereUniqueInput!]
  set: [QuestionWhereUniqueInput!]
  create: [QuestionCreateInput!]
  connect: [QuestionWhereUniqueInput!]
}

input CourseUpdateArgs {
  where: CourseWhereUniqueInput!
  data: CourseUpdateInput!
}

input CourseCreateInput {
  name: String
  questions: QuestionRelateToManyForCreateInput
  testResults: TestResultRelateToManyForCreateInput
}

input QuestionRelateToManyForCreateInput {
  create: [QuestionCreateInput!]
  connect: [QuestionWhereUniqueInput!]
}

type Question {
  id: ID!
  question: String
  course(where: CourseWhereInput! = {}, orderBy: [CourseOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CourseWhereUniqueInput): [Course!]
  courseCount(where: CourseWhereInput! = {}): Int
  answer: Answer
  wrongAnswer(where: WrongAnswerWhereInput! = {}, orderBy: [WrongAnswerOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: WrongAnswerWhereUniqueInput): [WrongAnswer!]
  wrongAnswerCount(where: WrongAnswerWhereInput! = {}): Int
  result(where: QuestionResultWhereInput! = {}, orderBy: [QuestionResultOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: QuestionResultWhereUniqueInput): [QuestionResult!]
  resultCount(where: QuestionResultWhereInput! = {}): Int
}

input QuestionWhereUniqueInput {
  id: ID
}

input QuestionWhereInput {
  AND: [QuestionWhereInput!]
  OR: [QuestionWhereInput!]
  NOT: [QuestionWhereInput!]
  id: IDFilter
  question: StringFilter
  course: CourseManyRelationFilter
  answer: AnswerWhereInput
  wrongAnswer: WrongAnswerManyRelationFilter
  result: QuestionResultManyRelationFilter
}

input CourseManyRelationFilter {
  every: CourseWhereInput
  some: CourseWhereInput
  none: CourseWhereInput
}

input WrongAnswerManyRelationFilter {
  every: WrongAnswerWhereInput
  some: WrongAnswerWhereInput
  none: WrongAnswerWhereInput
}

input QuestionOrderByInput {
  id: OrderDirection
  question: OrderDirection
}

input QuestionUpdateInput {
  question: String
  course: CourseRelateToManyForUpdateInput
  answer: AnswerRelateToOneForUpdateInput
  wrongAnswer: WrongAnswerRelateToManyForUpdateInput
  result: QuestionResultRelateToManyForUpdateInput
}

input CourseRelateToManyForUpdateInput {
  disconnect: [CourseWhereUniqueInput!]
  set: [CourseWhereUniqueInput!]
  create: [CourseCreateInput!]
  connect: [CourseWhereUniqueInput!]
}

input AnswerRelateToOneForUpdateInput {
  create: AnswerCreateInput
  connect: AnswerWhereUniqueInput
  disconnect: Boolean
}

input WrongAnswerRelateToManyForUpdateInput {
  disconnect: [WrongAnswerWhereUniqueInput!]
  set: [WrongAnswerWhereUniqueInput!]
  create: [WrongAnswerCreateInput!]
  connect: [WrongAnswerWhereUniqueInput!]
}

input QuestionUpdateArgs {
  where: QuestionWhereUniqueInput!
  data: QuestionUpdateInput!
}

input QuestionCreateInput {
  question: String
  course: CourseRelateToManyForCreateInput
  answer: AnswerRelateToOneForCreateInput
  wrongAnswer: WrongAnswerRelateToManyForCreateInput
  result: QuestionResultRelateToManyForCreateInput
}

input CourseRelateToManyForCreateInput {
  create: [CourseCreateInput!]
  connect: [CourseWhereUniqueInput!]
}

input AnswerRelateToOneForCreateInput {
  create: AnswerCreateInput
  connect: AnswerWhereUniqueInput
}

input WrongAnswerRelateToManyForCreateInput {
  create: [WrongAnswerCreateInput!]
  connect: [WrongAnswerWhereUniqueInput!]
}

type Answer {
  id: ID!
  title: String
  question: Question
}

input AnswerWhereUniqueInput {
  id: ID
}

input AnswerWhereInput {
  AND: [AnswerWhereInput!]
  OR: [AnswerWhereInput!]
  NOT: [AnswerWhereInput!]
  id: IDFilter
  title: StringFilter
  question: QuestionWhereInput
}

input AnswerOrderByInput {
  id: OrderDirection
  title: OrderDirection
}

input AnswerUpdateInput {
  title: String
  question: QuestionRelateToOneForUpdateInput
}

input QuestionRelateToOneForUpdateInput {
  create: QuestionCreateInput
  connect: QuestionWhereUniqueInput
  disconnect: Boolean
}

input AnswerUpdateArgs {
  where: AnswerWhereUniqueInput!
  data: AnswerUpdateInput!
}

input AnswerCreateInput {
  title: String
  question: QuestionRelateToOneForCreateInput
}

input QuestionRelateToOneForCreateInput {
  create: QuestionCreateInput
  connect: QuestionWhereUniqueInput
}

type WrongAnswer {
  id: ID!
  question(where: QuestionWhereInput! = {}, orderBy: [QuestionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: QuestionWhereUniqueInput): [Question!]
  questionCount(where: QuestionWhereInput! = {}): Int
  title: String
}

input WrongAnswerWhereUniqueInput {
  id: ID
}

input WrongAnswerWhereInput {
  AND: [WrongAnswerWhereInput!]
  OR: [WrongAnswerWhereInput!]
  NOT: [WrongAnswerWhereInput!]
  id: IDFilter
  question: QuestionManyRelationFilter
  title: StringFilter
}

input WrongAnswerOrderByInput {
  id: OrderDirection
  title: OrderDirection
}

input WrongAnswerUpdateInput {
  question: QuestionRelateToManyForUpdateInput
  title: String
}

input WrongAnswerUpdateArgs {
  where: WrongAnswerWhereUniqueInput!
  data: WrongAnswerUpdateInput!
}

input WrongAnswerCreateInput {
  question: QuestionRelateToManyForCreateInput
  title: String
}

type TestResult {
  id: ID!
  title: String
  score: String
  user: User
  course: Course
  questionResult(where: QuestionResultWhereInput! = {}, orderBy: [QuestionResultOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: QuestionResultWhereUniqueInput): [QuestionResult!]
  questionResultCount(where: QuestionResultWhereInput! = {}): Int
  completed: String
}

input TestResultWhereUniqueInput {
  id: ID
}

input TestResultWhereInput {
  AND: [TestResultWhereInput!]
  OR: [TestResultWhereInput!]
  NOT: [TestResultWhereInput!]
  id: IDFilter
  title: StringFilter
  score: StringFilter
  user: UserWhereInput
  course: CourseWhereInput
  questionResult: QuestionResultManyRelationFilter
  completed: StringFilter
}

input TestResultOrderByInput {
  id: OrderDirection
  title: OrderDirection
  score: OrderDirection
  completed: OrderDirection
}

input TestResultUpdateInput {
  title: String
  score: String
  user: UserRelateToOneForUpdateInput
  course: CourseRelateToOneForUpdateInput
  questionResult: QuestionResultRelateToManyForUpdateInput
  completed: String
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input CourseRelateToOneForUpdateInput {
  create: CourseCreateInput
  connect: CourseWhereUniqueInput
  disconnect: Boolean
}

input TestResultUpdateArgs {
  where: TestResultWhereUniqueInput!
  data: TestResultUpdateInput!
}

input TestResultCreateInput {
  title: String
  score: String
  user: UserRelateToOneForCreateInput
  course: CourseRelateToOneForCreateInput
  questionResult: QuestionResultRelateToManyForCreateInput
  completed: String
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input CourseRelateToOneForCreateInput {
  create: CourseCreateInput
  connect: CourseWhereUniqueInput
}

type QuestionResult {
  id: ID!
  title: String
  result(where: QuestionWhereInput! = {}, orderBy: [QuestionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: QuestionWhereUniqueInput): [Question!]
  resultCount(where: QuestionWhereInput! = {}): Int
  resultResponse: String
  user(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  userCount(where: UserWhereInput! = {}): Int
  test(where: TestResultWhereInput! = {}, orderBy: [TestResultOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TestResultWhereUniqueInput): [TestResult!]
  testCount(where: TestResultWhereInput! = {}): Int
}

input QuestionResultWhereUniqueInput {
  id: ID
}

input QuestionResultWhereInput {
  AND: [QuestionResultWhereInput!]
  OR: [QuestionResultWhereInput!]
  NOT: [QuestionResultWhereInput!]
  id: IDFilter
  title: StringFilter
  result: QuestionManyRelationFilter
  resultResponse: StringFilter
  user: UserManyRelationFilter
  test: TestResultManyRelationFilter
}

input UserManyRelationFilter {
  every: UserWhereInput
  some: UserWhereInput
  none: UserWhereInput
}

input QuestionResultOrderByInput {
  id: OrderDirection
  title: OrderDirection
  resultResponse: OrderDirection
}

input QuestionResultUpdateInput {
  title: String
  result: QuestionRelateToManyForUpdateInput
  resultResponse: String
  user: UserRelateToManyForUpdateInput
  test: TestResultRelateToManyForUpdateInput
}

input UserRelateToManyForUpdateInput {
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input QuestionResultUpdateArgs {
  where: QuestionResultWhereUniqueInput!
  data: QuestionResultUpdateInput!
}

input QuestionResultCreateInput {
  title: String
  result: QuestionRelateToManyForCreateInput
  resultResponse: String
  user: UserRelateToManyForCreateInput
  test: TestResultRelateToManyForCreateInput
}

input UserRelateToManyForCreateInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createCourse(data: CourseCreateInput!): Course
  createCourses(data: [CourseCreateInput!]!): [Course]
  updateCourse(where: CourseWhereUniqueInput!, data: CourseUpdateInput!): Course
  updateCourses(data: [CourseUpdateArgs!]!): [Course]
  deleteCourse(where: CourseWhereUniqueInput!): Course
  deleteCourses(where: [CourseWhereUniqueInput!]!): [Course]
  createQuestion(data: QuestionCreateInput!): Question
  createQuestions(data: [QuestionCreateInput!]!): [Question]
  updateQuestion(where: QuestionWhereUniqueInput!, data: QuestionUpdateInput!): Question
  updateQuestions(data: [QuestionUpdateArgs!]!): [Question]
  deleteQuestion(where: QuestionWhereUniqueInput!): Question
  deleteQuestions(where: [QuestionWhereUniqueInput!]!): [Question]
  createAnswer(data: AnswerCreateInput!): Answer
  createAnswers(data: [AnswerCreateInput!]!): [Answer]
  updateAnswer(where: AnswerWhereUniqueInput!, data: AnswerUpdateInput!): Answer
  updateAnswers(data: [AnswerUpdateArgs!]!): [Answer]
  deleteAnswer(where: AnswerWhereUniqueInput!): Answer
  deleteAnswers(where: [AnswerWhereUniqueInput!]!): [Answer]
  createWrongAnswer(data: WrongAnswerCreateInput!): WrongAnswer
  createWrongAnswers(data: [WrongAnswerCreateInput!]!): [WrongAnswer]
  updateWrongAnswer(where: WrongAnswerWhereUniqueInput!, data: WrongAnswerUpdateInput!): WrongAnswer
  updateWrongAnswers(data: [WrongAnswerUpdateArgs!]!): [WrongAnswer]
  deleteWrongAnswer(where: WrongAnswerWhereUniqueInput!): WrongAnswer
  deleteWrongAnswers(where: [WrongAnswerWhereUniqueInput!]!): [WrongAnswer]
  createTestResult(data: TestResultCreateInput!): TestResult
  createTestResults(data: [TestResultCreateInput!]!): [TestResult]
  updateTestResult(where: TestResultWhereUniqueInput!, data: TestResultUpdateInput!): TestResult
  updateTestResults(data: [TestResultUpdateArgs!]!): [TestResult]
  deleteTestResult(where: TestResultWhereUniqueInput!): TestResult
  deleteTestResults(where: [TestResultWhereUniqueInput!]!): [TestResult]
  createQuestionResult(data: QuestionResultCreateInput!): QuestionResult
  createQuestionResults(data: [QuestionResultCreateInput!]!): [QuestionResult]
  updateQuestionResult(where: QuestionResultWhereUniqueInput!, data: QuestionResultUpdateInput!): QuestionResult
  updateQuestionResults(data: [QuestionResultUpdateArgs!]!): [QuestionResult]
  deleteQuestionResult(where: QuestionResultWhereUniqueInput!): QuestionResult
  deleteQuestionResults(where: [QuestionResultWhereUniqueInput!]!): [QuestionResult]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
  checkQuestion(id: ID!, data: JSON): QuestionResult
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  courses(where: CourseWhereInput! = {}, orderBy: [CourseOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CourseWhereUniqueInput): [Course!]
  course(where: CourseWhereUniqueInput!): Course
  coursesCount(where: CourseWhereInput! = {}): Int
  questions(where: QuestionWhereInput! = {}, orderBy: [QuestionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: QuestionWhereUniqueInput): [Question!]
  question(where: QuestionWhereUniqueInput!): Question
  questionsCount(where: QuestionWhereInput! = {}): Int
  answers(where: AnswerWhereInput! = {}, orderBy: [AnswerOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AnswerWhereUniqueInput): [Answer!]
  answer(where: AnswerWhereUniqueInput!): Answer
  answersCount(where: AnswerWhereInput! = {}): Int
  wrongAnswers(where: WrongAnswerWhereInput! = {}, orderBy: [WrongAnswerOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: WrongAnswerWhereUniqueInput): [WrongAnswer!]
  wrongAnswer(where: WrongAnswerWhereUniqueInput!): WrongAnswer
  wrongAnswersCount(where: WrongAnswerWhereInput! = {}): Int
  testResults(where: TestResultWhereInput! = {}, orderBy: [TestResultOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TestResultWhereUniqueInput): [TestResult!]
  testResult(where: TestResultWhereUniqueInput!): TestResult
  testResultsCount(where: TestResultWhereInput! = {}): Int
  questionResults(where: QuestionResultWhereInput! = {}, orderBy: [QuestionResultOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: QuestionResultWhereUniqueInput): [QuestionResult!]
  questionResult(where: QuestionResultWhereUniqueInput!): QuestionResult
  questionResultsCount(where: QuestionResultWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
