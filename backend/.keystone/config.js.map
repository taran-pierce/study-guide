{
  "version": 3,
  "sources": ["../keystone.ts", "../schema.ts", "../auth.ts"],
  "sourcesContent": ["import 'dotenv/config';\n\n// Welcome to Keystone!\n//\n// This file is what Keystone uses as the entry-point to your headless backend\n//\n// Keystone imports the default export of this file, expecting a Keystone configuration object\n//   you can find out more at https://keystonejs.com/docs/apis/config\n\nimport { config } from '@keystone-6/core';\n\n// to keep this file tidy, we define our schema in a different file\nimport {\n  lists,\n  extendGraphqlSchema,\n} from './schema';\n\n// authentication is configured separately here too, but you might move this elsewhere\n// when you write your list-level access control functions, as they typically rely on session data\nimport { withAuth, session } from './auth';\n\nconst dbURL = process.env.DATABASE_URL || '';\n\nexport default withAuth(\n  config({\n    server: {\n      cors: {\n        origin: [\n          'http://localhost:3001',\n          // process.env.VERCEL_URL,\n          // process.env.VERCEL_URL_SHORT,\n        ],\n        credentials: true,\n        methods: ['GET','DELETE','PATCH','POST','PUT','OPTIONS'],\n        allowedHeaders: [\n          'Access-Control-Allow-Origin',\n          'Access-Control-Allow-Methods',\n          'Access-Control-Allow-Headers',\n          'Access-Control-Allow-Credentials',\n          'Content-Type',\n          // TODO trying to get file upload from frontend working properly\n          // 'x-apollo-operation-name',\n          // 'apollo-require-preflight',\n        ]\n      }\n    },\n    db: {\n      // we're using sqlite for the fastest startup experience\n      //   for more information on what database might be appropriate for you\n      //   see https://keystonejs.com/docs/guides/choosing-a-database#title\n      provider: 'postgresql',\n      url: dbURL,\n    },\n    lists,\n    session,\n    extendGraphqlSchema,\n  })\n);\n", "// Welcome to your schema\n//   Schema driven development is Keystone's modus operandi\n//\n// This file is where we define the lists, fields and hooks for our data.\n// If you want to learn more about how lists are configured, please read\n// - https://keystonejs.com/docs/config/lists\nimport { graphql } from '@keystone-6/core';\nimport { list } from '@keystone-6/core';\nimport { allowAll } from '@keystone-6/core/access';\n\n// see https://keystonejs.com/docs/fields/overview for the full list of fields\n//   this is a few common fields for an example\nimport {\n  text,\n  relationship,\n  password,\n  timestamp,\n  select,\n  checkbox,\n  virtual,\n} from '@keystone-6/core/fields';\n\n// the document field is a more complicated field, so it has it's own package\nimport { document } from '@keystone-6/fields-document';\n// if you want to make your own fields, see https://keystonejs.com/docs/guides/custom-fields\n\n// when using Typescript, you can refine your types to a stricter subset by importing\n// the generated types from '.keystone/types'\nimport type { Lists } from '.keystone/types';\n\nexport const lists: Lists = {\n  User: list({\n    // WARNING\n    //   for this starter project, anyone can create, query, update and delete anything\n    //   if you want to prevent random people on the internet from accessing your data,\n    //   you can find out more at https://keystonejs.com/docs/guides/auth-and-access-control\n    access: allowAll,\n\n    // this is the fields for our User list\n    fields: {\n      // by adding isRequired, we enforce that every User should have a name\n      //   if no name is provided, an error will be displayed\n      name: text({\n        validation: { \n          isRequired: true \n        },\n      }),\n      email: text({\n        validation: { isRequired: true },\n        // by adding isIndexed: 'unique', we're saying that no user can have the same\n        // email as another user - this may or may not be a good idea for your project\n        isIndexed: 'unique',\n      }),\n      password: password({ validation: { isRequired: true } }),\n      createdAt: timestamp({\n        // this sets the timestamp to Date.now() when the user is first created\n        defaultValue: { kind: 'now' },\n      }),\n      testResults: relationship({\n        ref: 'TestResult.user',\n        many: true,\n      }),\n      questionResults: relationship({\n        ref: 'QuestionResult.user',\n        many: true,\n      }),\n    },\n  }),\n  Course: list({\n    access: allowAll,\n    fields: {\n      name: text({\n        validation: {\n          isRequired: true,\n        },\n      }),\n      questions: relationship({\n        ref: 'Question.course',\n        many: true,\n      }),\n      testResults: relationship({\n        ref: 'TestResult.course',\n        many: true,\n      }),\n    }\n  }),\n  Question: list({\n    access: allowAll,\n    ui: {\n      labelField: 'question',\n    },\n    fields: {\n      question: text({\n        validation: {\n          isRequired: true,\n        }\n      }),\n      course: relationship({\n        ref: 'Course.questions',\n        many: true,\n      }),\n      answer: relationship({\n        ref: 'Answer.question',\n      }),\n      wrongAnswer: relationship({\n        ref: 'WrongAnswer.question',\n        many: true,\n      }),\n      result: relationship({\n        ref: 'QuestionResult.result',\n        many: true,\n      }),\n    }\n  }),\n  Answer: list({\n    access: allowAll,\n    fields: {\n      title: text(),\n      question: relationship({\n        ref: 'Question.answer',\n      }),\n      result: relationship({\n        ref: 'QuestionResult.answer',\n        many: true,\n      }),\n    }\n  }),\n  WrongAnswer: list({\n    access: allowAll,\n    fields: {\n      question: relationship({\n        ref: 'Question.wrongAnswer',\n        many: true,\n      }),\n      title: text(),\n    }\n  }),\n  TestResult: list({\n    access: allowAll,\n    fields: {\n      title: text(),\n      // TODO calculation of test results\n      score: text(),\n      user: relationship({\n        ref: 'User.testResults',\n      }),\n      course: relationship({\n        ref: 'Course.testResults',\n      }),\n      questionResult: relationship({\n        ref: 'QuestionResult.test',\n        many: true,\n      }),\n      completed: text(),\n    }\n  }),\n  QuestionResult: list({\n    access: allowAll,\n    fields: {\n      title: text(),\n      result: relationship({\n        ref: 'Question.result',\n        many: true,\n      }),\n      resultResponse: text(),\n      user: relationship({\n        ref: 'User.questionResults',\n        many: true,\n      }),\n      answer: relationship({\n        ref: 'Answer.result',\n      }),\n      selectedAnswer: text(),\n      test: relationship({\n        ref: 'TestResult.questionResult',\n        many: true,\n      }),\n    }\n  }),\n};\n\nexport const extendGraphqlSchema = graphql.extend(base => {\n  return {\n    mutation: {\n      checkQuestion: graphql.field({\n        type: base.object('QuestionResult'),\n        args: {\n          id: graphql.arg({ type: graphql.nonNull(graphql.ID) }),\n          data: graphql.arg({ type: graphql.JSON}),\n        },\n        async resolve (source, { id, data }: any, context) {\n          // get info about \"question\"\n          const questionData = await context.query.Question.findMany({\n            where: {\n              id: {\n                equals: id\n              },\n            },\n            query: 'id question answer { id title }'\n          });\n\n          // get test info\n          // get info about \"question\"\n          const testData = await context.query.TestResult.findMany({\n            where: {\n              id: {\n                equals: data.result\n              },\n            },\n            query: 'id completed score questionResultCount course { id name questionsCount }'\n          });\n\n          const {\n            course,\n            score,\n            questionResultCount,\n          } = testData[0];\n\n          const measure = 100 / course.questionsCount;\n          let newScore = Number(score);\n\n          // grab ids for correct and selected answer\n          const correctAnswerId = questionData[0].answer.id;\n          const selectedAnswerId = data.answer.id;\n\n          // if they match, the correct answer was selected \n          const isCorrectAnswer = selectedAnswerId === correctAnswerId;\n\n          // when the answer is correct, update the score\n          if (isCorrectAnswer) {\n            newScore = newScore + measure;\n\n            context.db.TestResult.updateOne({\n              where: {\n                id: data.result,\n              },\n              data: {\n                score: newScore.toString(),\n              }\n            });\n          }\n\n          // the result is increamented after this step, so when this count plus one matches\n          // the questions count, its the last one\n          if ((questionResultCount + 1) === course.questionsCount) {            \n            context.db.TestResult.updateOne({\n              where: {\n                id: data.result,\n              },\n              data: {\n                completed: 'true'\n              }\n            });\n          }\n\n          // create entry in DB\n          return context.db.QuestionResult.createOne({\n            data: {\n              resultResponse: isCorrectAnswer ? 'correct' : 'wrong',\n              selectedAnswer: data?.resultResponse || '',\n              title: data?.title,\n              user: {\n                connect: {\n                  id: data.user,\n                }\n              },\n              test: {\n                connect: {\n                  id: data.result,\n                }\n              },\n              result: {\n                connect: {\n                  id: id\n                }\n              }\n            }\n          });\n        },\n      }),\n    },\n  }\n});\n", "// Welcome to some authentication for Keystone\n//\n// This is using @keystone-6/auth to add the following\n// - A sign-in page for your Admin UI\n// - A cookie-based stateless session strategy\n//    - Using a User email as the identifier\n//    - 30 day cookie expiration\n//\n// This file does not configure what Users can do, and the default for this starter\n// project is to allow anyone - logged-in or not - to do anything.\n//\n// If you want to prevent random people on the internet from accessing your data,\n// you can find out how by reading https://keystonejs.com/docs/guides/auth-and-access-control\n//\n// If you want to learn more about how our out-of-the-box authentication works, please\n// read https://keystonejs.com/docs/apis/auth#authentication-api\n\nimport { randomBytes } from 'crypto';\nimport { createAuth } from '@keystone-6/auth';\n\n// see https://keystonejs.com/docs/apis/session for the session docs\nimport { statelessSessions } from '@keystone-6/core/session';\n\n// for a stateless session, a SESSION_SECRET should always be provided\n//   especially in production (statelessSessions will throw if SESSION_SECRET is undefined)\nlet sessionSecret = process.env.SESSION_SECRET;\nif (!sessionSecret && process.env.NODE_ENV !== 'production') {\n  sessionSecret = randomBytes(32).toString('hex');\n}\n\n// withAuth is a function we can use to wrap our base configuration\nconst { withAuth } = createAuth({\n  listKey: 'User',\n  identityField: 'email',\n\n  // this is a GraphQL query fragment for fetching what data will be attached to a context.session\n  //   this can be helpful for when you are writing your access control functions\n  //   you can find out more at https://keystonejs.com/docs/guides/auth-and-access-control\n  sessionData: 'name createdAt',\n  secretField: 'password',\n\n  // WARNING: remove initFirstItem functionality in production\n  //   see https://keystonejs.com/docs/config/auth#init-first-item for more\n  initFirstItem: {\n    // if there are no items in the database, by configuring this field\n    //   you are asking the Keystone AdminUI to create a new user\n    //   providing inputs for these fields\n    fields: ['name', 'email', 'password'],\n\n    // it uses context.sudo() to do this, which bypasses any access control you might have\n    //   you shouldn't use this in production\n  },\n});\n\n// statelessSessions uses cookies for session tracking\n//   these cookies have an expiry, in seconds\n//   we use an expiry of 30 days for this starter\nconst sessionMaxAge = 60 * 60 * 24 * 30;\n\n// you can find out more at https://keystonejs.com/docs/apis/session#session-api\nconst session = statelessSessions({\n  maxAge: sessionMaxAge,\n  secret: sessionSecret!,\n});\n\nexport { withAuth, session };\n"],
  "mappings": "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",
  "names": ["import_core", "import_core"]
}
